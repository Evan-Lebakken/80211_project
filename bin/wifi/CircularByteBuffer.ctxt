#BlueJ class context
comment0.target=CircularByteBuffer
comment0.text=\r\n\ Implements\ the\ Circular\ Buffer\ producer/consumer\ model\ for\ bytes.\r\n\ More\ information\ about\ this\ class\ is\ available\ from\ <a\ target\="_top"\ href\=\r\n\ "http\://ostermiller.org/utils/CircularByteBuffer.html">ostermiller.org</a>.\r\n\ <p>\r\n\ Using\ this\ class\ is\ a\ simpler\ alternative\ to\ using\ a\ PipedInputStream\r\n\ and\ a\ PipedOutputStream.\ PipedInputStreams\ and\ PipedOutputStreams\ don't\ support\ the\r\n\ mark\ operation,\ don't\ allow\ you\ to\ control\ buffer\ sizes\ that\ they\ use,\r\n\ and\ have\ a\ more\ complicated\ API\ that\ requires\ instantiating\ two\r\n\ classes\ and\ connecting\ them.\r\n\ <p>\r\n\ This\ class\ is\ thread\ safe.\r\n\r\n\ @see\ CircularCharBuffer\r\n\ @see\ CircularObjectBuffer\r\n\r\n\ @author\ Stephen\ Ostermiller\ http\://ostermiller.org/contact.pl?regarding\=Java+Utilities\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
comment1.params=
comment1.target=void\ clear()
comment1.text=\r\n\ Make\ this\ buffer\ ready\ for\ reuse.\ \ The\ contents\ of\ the\ buffer\r\n\ will\ be\ cleared\ and\ the\ streams\ associated\ with\ this\ buffer\r\n\ will\ be\ reopened\ if\ they\ had\ been\ closed.\r\n\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
comment10.params=
comment10.target=int\ marked()
comment10.text=\r\n\ Bytes\ saved\ for\ supporting\ marks.\r\n\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
comment11.params=
comment11.target=void\ ensureMark()
comment11.text=\r\n\ If\ we\ have\ passed\ the\ markSize\ reset\ the\r\n\ mark\ so\ that\ the\ space\ can\ be\ used.\r\n\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
comment12.params=
comment12.target=CircularByteBuffer()
comment12.text=\r\n\ Create\ a\ new\ buffer\ with\ a\ default\ capacity.\r\n\ Writing\ to\ a\ full\ buffer\ will\ block\ until\ space\r\n\ is\ available\ rather\ than\ throw\ an\ exception.\r\n\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
comment13.params=size
comment13.target=CircularByteBuffer(int)
comment13.text=\r\n\ Create\ a\ new\ buffer\ with\ given\ capacity.\r\n\ Writing\ to\ a\ full\ buffer\ will\ block\ until\ space\r\n\ is\ available\ rather\ than\ throw\ an\ exception.\r\n\ <p>\r\n\ Note\ that\ the\ buffer\ may\ reserve\ some\ bytes\ for\r\n\ special\ purposes\ and\ capacity\ number\ of\ bytes\ may\r\n\ not\ be\ able\ to\ be\ written\ to\ the\ buffer.\r\n\ <p>\r\n\ Note\ that\ if\ the\ buffer\ is\ of\ INFINITE_SIZE\ it\ will\r\n\ neither\ block\ or\ throw\ exceptions,\ but\ rather\ grow\r\n\ without\ bound.\r\n\r\n\ @param\ size\ desired\ capacity\ of\ the\ buffer\ in\ bytes\ or\ CircularByteBuffer.INFINITE_SIZE.\r\n\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
comment14.params=blockingWrite
comment14.target=CircularByteBuffer(boolean)
comment14.text=\r\n\ Create\ a\ new\ buffer\ with\ a\ default\ capacity\ and\r\n\ given\ blocking\ behavior.\r\n\r\n\ @param\ blockingWrite\ true\ writing\ to\ a\ full\ buffer\ should\ block\r\n\ \ \ \ \ \ \ \ until\ space\ is\ available,\ false\ if\ an\ exception\ should\r\n\ \ \ \ \ \ \ \ be\ thrown\ instead.\r\n\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
comment15.params=size\ blockingWrite
comment15.target=CircularByteBuffer(int,\ boolean)
comment15.text=\r\n\ Create\ a\ new\ buffer\ with\ the\ given\ capacity\ and\r\n\ blocking\ behavior.\r\n\ <p>\r\n\ Note\ that\ the\ buffer\ may\ reserve\ some\ bytes\ for\r\n\ special\ purposes\ and\ capacity\ number\ of\ bytes\ may\r\n\ not\ be\ able\ to\ be\ written\ to\ the\ buffer.\r\n\ <p>\r\n\ Note\ that\ if\ the\ buffer\ is\ of\ INFINITE_SIZE\ it\ will\r\n\ neither\ block\ or\ throw\ exceptions,\ but\ rather\ grow\r\n\ without\ bound.\r\n\r\n\ @param\ size\ desired\ capacity\ of\ the\ buffer\ in\ bytes\ or\ CircularByteBuffer.INFINITE_SIZE.\r\n\ @param\ blockingWrite\ true\ writing\ to\ a\ full\ buffer\ should\ block\r\n\ \ \ \ \ \ \ \ until\ space\ is\ available,\ false\ if\ an\ exception\ should\r\n\ \ \ \ \ \ \ \ be\ thrown\ instead.\r\n\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
comment2.params=
comment2.target=java.io.OutputStream\ getOutputStream()
comment2.text=\r\n\ Retrieve\ a\ OutputStream\ that\ can\ be\ used\ to\ fill\r\n\ this\ buffer.\r\n\ <p>\r\n\ Write\ methods\ may\ throw\ a\ BufferOverflowException\ if\r\n\ the\ buffer\ is\ not\ large\ enough.\ \ A\ large\ enough\ buffer\r\n\ size\ must\ be\ chosen\ so\ that\ this\ does\ not\ happen\ or\r\n\ the\ caller\ must\ be\ prepared\ to\ catch\ the\ exception\ and\r\n\ try\ again\ once\ part\ of\ the\ buffer\ has\ been\ consumed.\r\n\r\n\r\n\ @return\ the\ producer\ for\ this\ buffer.\r\n\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
comment3.params=
comment3.target=java.io.InputStream\ getInputStream()
comment3.text=\r\n\ Retrieve\ a\ InputStream\ that\ can\ be\ used\ to\ empty\r\n\ this\ buffer.\r\n\ <p>\r\n\ This\ InputStream\ supports\ marks\ at\ the\ expense\r\n\ of\ the\ buffer\ size.\r\n\r\n\ @return\ the\ consumer\ for\ this\ buffer.\r\n\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
comment4.params=
comment4.target=int\ getAvailable()
comment4.text=\r\n\ Get\ number\ of\ bytes\ that\ are\ available\ to\ be\ read.\r\n\ <p>\r\n\ Note\ that\ the\ number\ of\ bytes\ available\ plus\r\n\ the\ number\ of\ bytes\ free\ may\ not\ add\ up\ to\ the\r\n\ capacity\ of\ this\ buffer,\ as\ the\ buffer\ may\ reserve\ some\r\n\ space\ for\ other\ purposes.\r\n\r\n\ @return\ the\ size\ in\ bytes\ of\ this\ buffer\r\n\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
comment5.params=
comment5.target=int\ getSpaceLeft()
comment5.text=\r\n\ Get\ the\ number\ of\ bytes\ this\ buffer\ has\ free\ for\r\n\ writing.\r\n\ <p>\r\n\ Note\ that\ the\ number\ of\ bytes\ available\ plus\r\n\ the\ number\ of\ bytes\ free\ may\ not\ add\ up\ to\ the\r\n\ capacity\ of\ this\ buffer,\ as\ the\ buffer\ may\ reserve\ some\r\n\ space\ for\ other\ purposes.\r\n\r\n\ @return\ the\ available\ space\ in\ bytes\ of\ this\ buffer\r\n\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
comment6.params=
comment6.target=int\ getSize()
comment6.text=\r\n\ Get\ the\ capacity\ of\ this\ buffer.\r\n\ <p>\r\n\ Note\ that\ the\ number\ of\ bytes\ available\ plus\r\n\ the\ number\ of\ bytes\ free\ may\ not\ add\ up\ to\ the\r\n\ capacity\ of\ this\ buffer,\ as\ the\ buffer\ may\ reserve\ some\r\n\ space\ for\ other\ purposes.\r\n\r\n\ @return\ the\ size\ in\ bytes\ of\ this\ buffer\r\n\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
comment7.params=
comment7.target=void\ resize()
comment7.text=\r\n\ double\ the\ size\ of\ the\ buffer\r\n\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
comment8.params=
comment8.target=int\ spaceLeft()
comment8.text=\r\n\ Space\ available\ in\ the\ buffer\ which\ can\ be\ written.\r\n\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
comment9.params=
comment9.target=int\ available()
comment9.text=\r\n\ Bytes\ available\ for\ reading.\r\n\r\n\ @since\ ostermillerutils\ 1.00.00\r\n
numComments=16
