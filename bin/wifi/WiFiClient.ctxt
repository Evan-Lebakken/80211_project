#BlueJ class context
comment0.target=WiFiClient
comment0.text=\r\n\ The\ WiFiClient\ class\ provides\ a\ GUI\ for\ interacting\ with\ 802.11~\ implementations.\ \ It\r\n\ can\ be\ used\ to\ drive\ either\ Java-based\ or\ C++-based\ link\ layers.\ \ (Use\ a\ CppGUIAdapter\r\n\ to\ interface\ this\ with\ C++\ code,\ and\ a\ JavaGUIAdapter\ to\ drive\ Java\ code.)\r\n\ Care\ is\ taken\ to\ ensure\ that\ all\ GUI-servicing\ operations\ occur\ in\ the\ event-dispatching\r\n\ thread\ while\ all\ interactions\ with\ 802.11~\ code\ occur\ in\ separate\ threads.\ \ Thus\ the\r\n\ constructor\ doesn't\ actually\ create\ the\ GUI\ &mdash;\ that\ happens\ in\ buildGUI()\ which\ is\r\n\ called\ from\ the\ client's\ run()\ method.\ \ (The\ run()\ method\ also\ starts\ up\ a\ thread\ to\ \r\n\ watch\ for\ arriving\ packets\ from\ the\ 802.11~\ layer.)\ \ The\ client's\ run\ method\ is\ invoked\ \r\n\ by\ main\ via\ SwingUtilities.invokeAndWait()\ to\ ensure\ it's\ executed\ on\ the\ event-dispatching\ \r\n\ thread.\r\n\ \r\n\ A\ complete\ Java\ implementation\ looks\ like\:\r\n\ <blockquote><pre>\r\n\ WiFiClient\r\n\ JavaGUIAdapter\r\n\ LinkLayer\ (802.11~\ implementation)\r\n\ RF\r\n\ </pre></blockquote>\r\n\ \r\n\ A\ complete\ C++\ implementation\ is\ messier,\ due\ to\ the\ need\ for\ additional\ layers\ to\ \r\n\ mediate\ between\ the\ Java\ and\ C++\ code\:\r\n\ <blockquote><pre>\r\n\ WiFiClient\ (Java)\r\n\ CppGUIAdapter\ (Java)\r\n\ cppStubs\ (C++)\r\n\ linklayer\ (802.11~\ implementation\ in\ C++)\r\n\ RF\ (C++\ JNI\ layer)\r\n\ RF\ (Java\ implementation\ of\ RF\ layer)\r\n\ </pre></blockquote>\r\n\ \r\n\ See\ the\ project\ documentation\ for\ additional\ information\ on\ compiling\ an\ 802.11~\ project.\r\n\ \r\n\ @author\ Brad\ Richards\r\n\ @version\ 1.2\r\n\r\n
comment1.params=MACaddr\ theLinkLayer
comment1.target=WiFiClient(short,\ GUIClientInterface)
comment1.text=\r\n\ The\ constructor\ builds\ the\ GUI\ and\ prepares\ it\ for\ use.\r\n
comment2.params=
comment2.target=void\ buildGUI()
comment2.text=\r\n\ Creates\ all\ of\ the\ GUI\ components\ and\ registers\ the\ event\ handlers.\r\n\ This\ method\ should\ be\ invoked\ on\ the\ event-dispatching\ thread.\r\n
comment3.params=e
comment3.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment3.text=\ \r\n\ Handler\ for\ button-press\ events.\ \ Users\ should\ never\ need\ to\ call\r\n\ this\ directly.\r\n
comment4.params=msg
comment4.target=void\ addText(java.lang.String)
comment4.text=\r\n\ Call\ this\ to\ append\ text\ to\ the\ scrolling\ output\ pane.\ \ No\ newlines\ are\ added,\r\n\ so\ be\ sure\ to\ include\ a\ "\\n"\ where\ desired.\ \ Text\ is\ collected\ in\ a\ StringBuffer\r\n\ (outputText)\ as\ well\ as\ the\ JTextArea\ (display).\ \ This\ allows\ us\ to\ continue\ \r\n\ buffering\ text\ even\ when\ the\ window\ output\ is\ paused.\r\n\ \r\n\ @param\ msg\ \ Text\ to\ add\ to\ the\ scrolling\ pane\r\n
comment5.params=
comment5.target=void\ saveToFile()
comment5.text=\r\n\ Prompts\ user\ to\ select\ an\ output\ file,\ then\ writes\ all\ text\ from\ the\r\n\ scrolling\ pane\ to\ the\ file.\r\n
comment6.params=
comment6.target=void\ run()
comment6.text=\r\n\ The\ run\ method\ should\ be\ executed\ by\ the\ event-dispatching\ thread.\ \ it\ creates\r\n\ the\ GUI\ and\ starts\ a\ thread\ to\ watch\ for\ packets\ arriving\ for\ this\ station.\r\n
comment7.params=args
comment7.target=void\ main(java.lang.String[])
comment7.text=\r\n\ The\ main\ method\ selects\ a\ MAC\ address,\ creates\ a\ WiFiClient\ GUI\ and\ associates\r\n\ it\ with\ the\ link\ layer\ implementation,\ then\ waits\ in\ an\ infinite\ loop\ watching\r\n\ for\ stream\ output\ from\ the\ link\ layer\ and\ routing\ into\ the\ GUI\ display.\r\n
numComments=8
